#!/usr/bin/env python3

from z3 import *

def generate_string(base, length):
    return [BitVec('%s%d' % (base, i), 8) for i in range(length)]

def char_limit(c):
    return And(0x20 <= c, c < 0x7f)

def print_model(m, var_l):
    found_flag = ''.join(chr(m[x].as_long()) for x in var_l)
    print(f"[+] flag : {found_flag} ")

def enc(flag):
    xor_key = 0x50
    for i in range(0x539):
        j = 0
        while (j < flag_len):
            c = flag[j]
            flag[j] = c ^ xor_key
            xor_key = c
            j += 1
    return flag

buffer = "\x48\x5f\x36\x35\x35\x25\x14\x2c\x1d\x01\x03\x2d\x0c\x6f\x35\x61\x7e\x34\x0a\x44\x24\x2c\x4a\x46\x19\x59\x5b\x0e\x78\x74\x29\x13\x2c\x00\x48\x89\xc2\x48\x89\x55\xe8\x48\x83\x7d\xe8\x00\x74\x0c\xbf\xd1\x09\x40\x00\xe8\xdb\xfa\xff\xff\xeb\x0a\xbf\xda\x09\x40\x00\xe8\xcf\xfa\xff\xff\x90\x48\x83\xc4\x38\x5b\x5d\xc3\x0f\x1f\x80\x00\x00\x00\x00\x41\x57\x41\x56\x41\x89\xff\x41\x55\x41\x54\x4c\x8d\x25\xbe\x04\x20\x00\x55\x48\x8d\x2d\xbe\x04\x20\x00\x53\x49\x89\xf6\x49\x89\xd5\x4c\x29\xe5\x48\x83\xec\x08\x48\xc1\xfd\x03\xe8\x57\xfa\xff\xff\x48\x85\xed\x74\x20\x31\xdb\x0f\x1f\x84\x00\x00\x00\x00\x00\x4c\x89\xea\x4c\x89\xf6\x44\x89\xff\x41\xff\x14\xdc\x48\x83\xc3\x01\x48\x39\xeb\x75\xea\x48\x83\xc4\x08\x5b\x5d\x41\x5c\x41\x5d\x41\x5e\x41\x5f\xc3\x90\x66\x2e\x0f\x1f\x84\x00\x00\x00\x00\x00\xf3\xc3\x00\x00\x48\x83\xec\x08\x48\x83\xc4\x08\xc3\x00\x00\x00\x01\x00\x02\x00\x6e\x65\x65\x64\x20\x61\x20\x66\x6c\x61\x67\x21\x00\x43\x6f\x72\x72\x65\x63\x74\x21\x00\x57\x72\x6f\x6e\x67\x21\x00\x00\x00\x00\x01\x1b\x03\x3b\x38\x00\x00\x00\x06\x00\x00\x00\x0c\xfa\xff\xff\x84\x00\x00\x00\x4c\xfa\xff\xff\x54\x00\x00\x00\x42\xfb\xff\xff\xac\x00\x00\x00\x6a\xfc\xff\xff\xcc\x00\x00\x00\x5c\xff\xff\xff\xf4\x00\x00\x00\xcc\xff\xff\xff\x3c\x01\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x01\x7a\x52\x00\x01\x78\x10\x01\x1b\x0c\x07\x08\x90\x01\x07\x10\x14\x00\x00\x00\x1c\x00\x00\x00\xf0\xf9\xff\xff\x2a\x00\x00\x00\x00\x00\x00"

flag_len = 10
while flag_len < 0x100:
    solv = Solver()
    flag = generate_string('flag', flag_len)
    for i in range(flag_len - 1):
        solv.add(char_limit(flag[i]))
    solv.add(flag[0] == ord('p'))
    solv.add(flag[1] == ord('c'))
    solv.add(flag[2] == ord('t'))
    solv.add(flag[3] == ord('f'))
    solv.add(flag[4] == ord('{'))

    solv.add(flag[flag_len - 1] == ord('}'))

    enc_flag = enc(flag.copy())

    for i in range(0x0, flag_len - 1):
        solv.add(enc_flag[i] == ord(buffer[i]))

    if solv.check() != unsat:
        while solv.check() == sat:
            print_model(solv.model(), flag)
            exit() 
    print(f"[+] no solution can be found for length {flag_len}")
    flag_len += 1